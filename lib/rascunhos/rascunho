import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'indicator.dart';

class PizzaChart extends StatefulWidget {
  final bool isDonut;

  const PizzaChart({super.key, required this.isDonut});

  @override
  State<StatefulWidget> createState() => PizzaChartState();
}

class PizzaChartState extends State<PizzaChart> {
  int touchedIndex = -1;

  @override
  Widget build(BuildContext context) {
    return AspectRatio(
      aspectRatio: 1.3,
      child: Column(
        children: <Widget>[
          const SizedBox(height: 28),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>[
              Indicator(
                color: Colors.blue,
                text: 'One',
                isSquare: false,
                size: touchedIndex == 0 ? 18 : 16,
                textColor: touchedIndex == 0 ? Colors.black : Colors.grey,
              ),
              Indicator(
                color: Colors.yellow,
                text: 'Two',
                isSquare: false,
                size: touchedIndex == 1 ? 18 : 16,
                textColor: touchedIndex == 1 ? Colors.black : Colors.grey,
              ),
              Indicator(
                color: Colors.pink,
                text: 'Three',
                isSquare: false,
                size: touchedIndex == 2 ? 18 : 16,
                textColor: touchedIndex == 2 ? Colors.black : Colors.grey,
              ),
              Indicator(
                color: Colors.green,
                text: 'Four',
                isSquare: false,
                size: touchedIndex == 3 ? 18 : 16,
                textColor: touchedIndex == 3 ? Colors.black : Colors.grey,
              ),
            ],
          ),
          const SizedBox(height: 18),
          Expanded(
            child: AspectRatio(
              aspectRatio: 1,
              child: PieChart(
                PieChartData(
                  pieTouchData: PieTouchData(
                    touchCallback: (FlTouchEvent event, pieTouchResponse) {
                      setState(() {
                        if (!event.isInterestedForInteractions || pieTouchResponse == null || pieTouchResponse.touchedSection == null) {
                          touchedIndex = -1;
                          return;
                        }
                        touchedIndex = pieTouchResponse.touchedSection!.touchedSectionIndex;
                      });
                    },
                  ),
                  startDegreeOffset: 180,
                  borderData: FlBorderData(show: false),
                  sectionsSpace: 1,
                  centerSpaceRadius: widget.isDonut ? 50 : 0, // Aumenta o centerSpaceRadius se for rosca
                  sections: showingSections(),
                  centerSpaceColor: Colors.black12,
                ),
                swapAnimationDuration: const Duration(milliseconds: 300),
                swapAnimationCurve: Curves.decelerate,
              ),
            ),
          ),
        ],
      ),
    );
  }

  List<PieChartSectionData> showingSections() {
    return List.generate(4, (i) {
      final isTouched = i == touchedIndex;
      const double tamanhoFonte = 16;
      const double raioSecao = 150;
      int incrementoAoTocado = 20;
      switch (i) {
        case 0:
          return PieChartSectionData(
            color: Colors.blue,
            value: 25,
            title: '',
            radius: isTouched ? raioSecao + incrementoAoTocado : raioSecao,
            titleStyle: const TextStyle(fontSize: tamanhoFonte, fontWeight: FontWeight.bold, color: Colors.white),
          );
        case 1:
          return PieChartSectionData(
            color: Colors.yellow,
            value: 25,
            title: '',
            radius: isTouched ? raioSecao + incrementoAoTocado : raioSecao,
            titleStyle: const TextStyle(fontSize: tamanhoFonte, fontWeight: FontWeight.bold, color: Colors.white),
          );
        case 2:
          return PieChartSectionData(
            color: Colors.pink,
            value: 25,
            title: '',
            radius: isTouched ? raioSecao + incrementoAoTocado : raioSecao,
            titleStyle: const TextStyle(fontSize: tamanhoFonte, fontWeight: FontWeight.bold, color: Colors.white),
          );
        case 3:
          return PieChartSectionData(
            color: Colors.green,
            value: 25,
            title: '',
            radius: isTouched ? raioSecao + incrementoAoTocado : raioSecao,
            titleStyle: const TextStyle(fontSize: tamanhoFonte, fontWeight: FontWeight.bold, color: Colors.white),
          );
        default:
          throw Error();
      }
    });
  }
}
